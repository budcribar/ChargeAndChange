@page "/charts"
@using System.Linq;

@inject SwaggerClient client
<h1>EV Charts</h1>
<MediaQuery Media="@Breakpoints.SmallDown" @bind-Matches="isSmall" />
@if (isSmall)
{
    <h2>Rotate to landscape to view chart</h2>
    <img src="rotate.png">
}
else
{
    @if (selectedSpec.Length > 0)
    {
        <div class="row">


            <RadzenDropDown TValue="string" Data="@specs.Keys" Style="width:30%" Change="@(args => Change(args?.ToString() ?? ""))" SelectedItem="selectedSpec" />

        </div>

        <div style="height:600px">



            <RadzenChart Style="width:100%;height:100%">
                <RadzenBarSeries Data="@filteredSpecs" CategoryProperty="Model" Title="@selectedSpec" LineType="LineType.Solid" ValueProperty="Value" />

                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />

                </RadzenValueAxis>
                <RadzenBarOptions Radius="5" />
            </RadzenChart>

        </div>
    }
    else
    {
        <h1>Loading....</h1>
    }
}

@code {
    bool isSmall = false;
    void Change(String spec)
    {
        selectedSpec = spec;
        filteredSpecs = evSpecs.Where(x => specs[selectedSpec].Item2.Invoke(x) != null).OrderBy(x => specs[selectedSpec].Item2.Invoke(x)).Select(x => new DataItem { Model = x.Model, Value = specs[selectedSpec].Item2.Invoke(x) }).ToArray();

    }

    private EVSpecs[] evSpecs = Array.Empty<EVSpecs>();
    class DataItem
    {
        public string Model { get; set; } = "";
        public double? Value { get; set; }
    }


    private DataItem[] filteredSpecs = Array.Empty<DataItem>();

    Dictionary<string, (string, Func<EVSpecs, double?>)> specs = new Dictionary<string, (string, Func<EVSpecs, double?>)> {
            {"Price", ("Price", (e) => (double?) e.Price)   },

            {  "PriceMinusFederalTaxCredit",  ("Price After Tax Credit", (e) => (double?) (e.Price - e.FederalTaxCredit) )  },
            {  "CombinedRange",  ("Range", (e) => (double?) e.CombinedRange)  },
            {  "MotorPowerHp",  ("Motor (hp)", (e) => (double?) (e.MotorPowerKw * 1.34102))  },
            {  "Torque", ( "Torque", (e) => (double?) e.Torque)  },
            {  "BatteryCapacity",  ("Batery Capacity (kwh)", (e) => (double?) e.BatteryCapacity)  },
            {  "Weight",  ("Weight (lbs)", (e) => (double?) e.Weight)  },
            {  "ZeroTo60mph",  ("Zero To 60 mph", (e) => (double?) e.ZeroTo60mph)  },
            {  "MaxChargePower",  ("Max Charge Power (kw)", (e) => (double?) e.MaxChargePower)  },
            {  "MinutesTo80PercentCharge",  ("Minutes To 80% Charge", (e) => (double?) e.MinutesTo80PercentCharge)  },
            {  "SafetyRating",  ("Safety Rating", (e) => (double?) e.SafetyRating)  }};

    string selectedSpec = "";




    protected override async Task OnInitializedAsync()
    {
        evSpecs = (await client.EVSpecsAsync()).ToList().OrderBy(x => x.Manufacturer).ThenBy(x => x.Model).ToArray();
        Change(specs.Keys.First());
    }


    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0");
    }


}
